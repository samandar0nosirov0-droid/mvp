generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  password  String
  fullName  String
  locale    Locale      @default(ru)
  role      Role        @default(user)
  cases     Case[]
  messages  Message[]
  sessions  Session[]
  feedbacks Feedback[]
  subscriptions Subscription[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Session {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tokenHash  String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  anonSessionId String?
}

model Case {
  id          String     @id @default(uuid())
  title       String
  description String
  category    String
  language    String
  metadata    Json?
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  messages    Message[]
  feedbacks   Feedback[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String
  content   String
  locale    String
  createdAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  priceUz     Int
  currency    String   @default("UZS")
  description String?
  subscriptions Subscription[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String
  status    String   @default("active")
  startedAt DateTime @default(now())
  endsAt    DateTime?
}

model Feedback {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  case      Case?    @relation(fields: [caseId], references: [id])
  caseId    String?
  message   String
  rating    Int?
  locale    Locale   @default(ru)
  metadata  Json?
  createdAt DateTime @default(now())
}

enum Role {
  user
  admin_registered
  admin_full
}

enum Locale {
  ru
  uz
}
